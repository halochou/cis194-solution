
==================== FINAL INTERFACE ====================
2016-07-04 02:34:46.591111 UTC

interface week1_GvFTF9WK6lF5y5rctsHK1g:Risk 7103
  interface hash: 1d84e91b2aa3cbc37ec24bed382a0b67
  ABI hash: 7c3d46bedd86280fb8a4fd62a448a58e
  export-list hash: b261cfe884ca0f9c4feab69e3f7c001f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 634bd13a5a648fcdd8368fdcad3d8f8d
  sig of: Nothing
  used TH splices: False
  where
exports:
  Risk.die
  Risk.first
  Risk.Army
  Risk.Battlefield{Risk.Battlefield Risk.attackers Risk.defenders}
  Risk.DieValue{Risk.DV Risk.unDV}
module dependencies:
package dependencies: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
orphans: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
import  -/  MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random 90bdd2f99043a36a11b0992f20e7a82c
import  -/  MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random.Class 8fb7631d73f7fc004068b23b6eaa6cfc
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  integer-gmp-1.0.0.0:GHC.Integer.Type 371e90fe753f08ddedf0d2657a9ef5c4
import  -/  random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL:System.Random d515be7800d601546639722a30f2fed4
5c582f2cb17135387cb0f739243d488a
  $fEqDieValue :: GHC.Classes.Eq Risk.DieValue
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Risk.DieValue Risk.$fEqDieValue_$c== Risk.$fEqDieValue_$c/= -}
5c582f2cb17135387cb0f739243d488a
  $fEqDieValue_$c/= ::
    Risk.DieValue -> Risk.DieValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.neInt
                  `cast`
                (Sym (Risk.NTCo:DieValue[0])
                 ->_R Sym (Risk.NTCo:DieValue[0])
                 ->_R <GHC.Types.Bool>_R) -}
5c582f2cb17135387cb0f739243d488a
  $fEqDieValue_$c== ::
    Risk.DieValue -> Risk.DieValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.eqInt
                  `cast`
                (Sym (Risk.NTCo:DieValue[0])
                 ->_R Sym (Risk.NTCo:DieValue[0])
                 ->_R <GHC.Types.Bool>_R) -}
5c582f2cb17135387cb0f739243d488a
  $fNumDieValue :: GHC.Num.Num Risk.DieValue
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Risk.DieValue
                  Risk.$fNumDieValue_$c+
                  Risk.$fNumDieValue_$c-
                  Risk.$fNumDieValue_$c*
                  Risk.$fNumDieValue_$cnegate
                  Risk.$fNumDieValue_$cabs
                  Risk.$fNumDieValue_$csignum
                  Risk.$fNumDieValue_$cfromInteger -}
5c582f2cb17135387cb0f739243d488a
  $fNumDieValue_$c* ::
    Risk.DieValue -> Risk.DieValue -> Risk.DieValue
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$c*
                  `cast`
                (Sym (Risk.NTCo:DieValue[0])
                 ->_R Sym (Risk.NTCo:DieValue[0])
                 ->_R Sym (Risk.NTCo:DieValue[0])) -}
5c582f2cb17135387cb0f739243d488a
  $fNumDieValue_$c+ ::
    Risk.DieValue -> Risk.DieValue -> Risk.DieValue
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$c+
                  `cast`
                (Sym (Risk.NTCo:DieValue[0])
                 ->_R Sym (Risk.NTCo:DieValue[0])
                 ->_R Sym (Risk.NTCo:DieValue[0])) -}
5c582f2cb17135387cb0f739243d488a
  $fNumDieValue_$c- ::
    Risk.DieValue -> Risk.DieValue -> Risk.DieValue
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$c-
                  `cast`
                (Sym (Risk.NTCo:DieValue[0])
                 ->_R Sym (Risk.NTCo:DieValue[0])
                 ->_R Sym (Risk.NTCo:DieValue[0])) -}
5c582f2cb17135387cb0f739243d488a
  $fNumDieValue_$cabs :: Risk.DieValue -> Risk.DieValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$cabs
                  `cast`
                (Sym (Risk.NTCo:DieValue[0]) ->_R Sym (Risk.NTCo:DieValue[0])) -}
5c582f2cb17135387cb0f739243d488a
  $fNumDieValue_$cfromInteger ::
    GHC.Integer.Type.Integer -> Risk.DieValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$cfromInteger
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (Risk.NTCo:DieValue[0])) -}
5c582f2cb17135387cb0f739243d488a
  $fNumDieValue_$cnegate :: Risk.DieValue -> Risk.DieValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$cnegate
                  `cast`
                (Sym (Risk.NTCo:DieValue[0]) ->_R Sym (Risk.NTCo:DieValue[0])) -}
5c582f2cb17135387cb0f739243d488a
  $fNumDieValue_$csignum :: Risk.DieValue -> Risk.DieValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$csignum
                  `cast`
                (Sym (Risk.NTCo:DieValue[0]) ->_R Sym (Risk.NTCo:DieValue[0])) -}
5c582f2cb17135387cb0f739243d488a
  $fOrdDieValue :: GHC.Classes.Ord Risk.DieValue
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Risk.DieValue
                  Risk.$fEqDieValue
                  Risk.$fOrdDieValue_$ccompare
                  Risk.$fOrdDieValue_$c<
                  Risk.$fOrdDieValue_$c<=
                  Risk.$fOrdDieValue_$c>
                  Risk.$fOrdDieValue_$c>=
                  Risk.$fOrdDieValue_$cmax
                  Risk.$fOrdDieValue_$cmin -}
5c582f2cb17135387cb0f739243d488a
  $fOrdDieValue_$c< ::
    Risk.DieValue -> Risk.DieValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.ltInt
                  `cast`
                (Sym (Risk.NTCo:DieValue[0])
                 ->_R Sym (Risk.NTCo:DieValue[0])
                 ->_R <GHC.Types.Bool>_R) -}
5c582f2cb17135387cb0f739243d488a
  $fOrdDieValue_$c<= ::
    Risk.DieValue -> Risk.DieValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.leInt
                  `cast`
                (Sym (Risk.NTCo:DieValue[0])
                 ->_R Sym (Risk.NTCo:DieValue[0])
                 ->_R <GHC.Types.Bool>_R) -}
5c582f2cb17135387cb0f739243d488a
  $fOrdDieValue_$c> ::
    Risk.DieValue -> Risk.DieValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.gtInt
                  `cast`
                (Sym (Risk.NTCo:DieValue[0])
                 ->_R Sym (Risk.NTCo:DieValue[0])
                 ->_R <GHC.Types.Bool>_R) -}
5c582f2cb17135387cb0f739243d488a
  $fOrdDieValue_$c>= ::
    Risk.DieValue -> Risk.DieValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.geInt
                  `cast`
                (Sym (Risk.NTCo:DieValue[0])
                 ->_R Sym (Risk.NTCo:DieValue[0])
                 ->_R <GHC.Types.Bool>_R) -}
5c582f2cb17135387cb0f739243d488a
  $fOrdDieValue_$ccompare ::
    Risk.DieValue -> Risk.DieValue -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.compareInt
                  `cast`
                (Sym (Risk.NTCo:DieValue[0])
                 ->_R Sym (Risk.NTCo:DieValue[0])
                 ->_R <GHC.Types.Ordering>_R) -}
5c582f2cb17135387cb0f739243d488a
  $fOrdDieValue_$cmax ::
    Risk.DieValue -> Risk.DieValue -> Risk.DieValue
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fOrdInt_$cmax
                  `cast`
                (Sym (Risk.NTCo:DieValue[0])
                 ->_R Sym (Risk.NTCo:DieValue[0])
                 ->_R Sym (Risk.NTCo:DieValue[0])) -}
5c582f2cb17135387cb0f739243d488a
  $fOrdDieValue_$cmin ::
    Risk.DieValue -> Risk.DieValue -> Risk.DieValue
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fOrdInt_$cmin
                  `cast`
                (Sym (Risk.NTCo:DieValue[0])
                 ->_R Sym (Risk.NTCo:DieValue[0])
                 ->_R Sym (Risk.NTCo:DieValue[0])) -}
5c582f2cb17135387cb0f739243d488a
  $fRandomDieValue :: System.Random.Random Risk.DieValue
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Risk.DieValue
                  Risk.$fRandomDieValue_$crandomR
                  Risk.$fRandomDieValue_$crandom
                  Risk.$fRandomDieValue_$crandomRs
                  Risk.$fRandomDieValue_$crandoms
                  Risk.$fRandomDieValue_$crandomRIO
                  Risk.$fRandomDieValue_$crandomIO -}
5c582f2cb17135387cb0f739243d488a
  $fRandomDieValue1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Risk.DieValue #)
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.NTCo:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, Risk.DieValue)
                        @ Risk.DieValue
                        r#
                        Risk.$fRandomDieValue2
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of b1 { DEFAULT -> ds1 } } }) -}
5c582f2cb17135387cb0f739243d488a
  $fRandomDieValue2 ::
    System.Random.StdGen -> (System.Random.StdGen, Risk.DieValue)
  {- Arity: 1,
     Unfolding: (\ a13 :: System.Random.StdGen ->
                 case System.Random.$wrandomIvalInteger
                        @ System.Random.StdGen
                        @ GHC.Types.Int
                        System.Random.$fRandomGenStdGen
                        GHC.Num.$fNumInt
                        Risk.$fRandomDieValue_a3
                        Risk.$fRandomDieValue_a2
                        a13 of ww2 { (#,#) ww3 ww4 ->
                 case ww4 of a'1 { System.Random.StdGen ipv ipv1 ->
                 (a'1, ww3 `cast` (Sym (Risk.NTCo:DieValue[0]))) } }) -}
5c582f2cb17135387cb0f739243d488a
  $fRandomDieValue3 ::
    (Risk.DieValue, Risk.DieValue)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Risk.DieValue #)
  {- Arity: 2, Strictness: <L,1*U(1*U(U),1*U(U))><L,U>m,
     Unfolding: (\ range :: (Risk.DieValue, Risk.DieValue)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.NTCo:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                 let {
                   f :: System.Random.StdGen -> (Risk.DieValue, System.Random.StdGen)
                   = case range of ww { (,) ww1 ww2 ->
                     Risk.$w$crandomR
                       @ System.Random.StdGen
                       System.Random.$fRandomGenStdGen
                       ww1
                       ww2 }
                 } in
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, Risk.DieValue)
                        @ Risk.DieValue
                        r#
                        (\ a13 :: System.Random.StdGen ->
                         case f a13 of wild1 { (,) v g ->
                         case g of a'1 { System.Random.StdGen ipv ipv1 -> (a'1, v) } })
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of b1 { DEFAULT -> ds1 } } }) -}
5c582f2cb17135387cb0f739243d488a
  $fRandomDieValue_$crandom ::
    System.Random.RandomGen g => g -> (Risk.DieValue, g)
  {- Arity: 2, Strictness: <L,U(C(U(1*U(U),U)),C(U(U,U)),A)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ g w :: System.Random.RandomGen g w1 :: g ->
                 case System.Random.$wrandomIvalInteger
                        @ g
                        @ GHC.Types.Int
                        w
                        GHC.Num.$fNumInt
                        Risk.$fRandomDieValue_a3
                        Risk.$fRandomDieValue_a2
                        w1 of ww2 { (#,#) ww3 ww4 ->
                 (ww3 `cast` (Sym (Risk.NTCo:DieValue[0])), ww4) }) -}
5c582f2cb17135387cb0f739243d488a
  $fRandomDieValue_$crandomIO :: GHC.Types.IO Risk.DieValue
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (0, True, True)
                Risk.$fRandomDieValue1
                  `cast`
                (Sym (GHC.Types.NTCo:IO[0] <Risk.DieValue>_R)) -}
5c582f2cb17135387cb0f739243d488a
  $fRandomDieValue_$crandomR ::
    System.Random.RandomGen g =>
    (Risk.DieValue, Risk.DieValue) -> g -> (Risk.DieValue, g)
  {- Arity: 2,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U,U)),A)><S,1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ g
                   w :: System.Random.RandomGen g
                   w1 :: (Risk.DieValue, Risk.DieValue) ->
                 case w1 of ww { (,) ww1 ww2 -> Risk.$w$crandomR @ g w ww1 ww2 }) -}
5c582f2cb17135387cb0f739243d488a
  $fRandomDieValue_$crandomRIO ::
    (Risk.DieValue, Risk.DieValue) -> GHC.Types.IO Risk.DieValue
  {- Arity: 2, Strictness: <L,1*U(1*U(U),1*U(U))><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Risk.$fRandomDieValue3
                  `cast`
                (<(Risk.DieValue, Risk.DieValue)>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <Risk.DieValue>_R)) -}
5c582f2cb17135387cb0f739243d488a
  $fRandomDieValue_$crandomRs ::
    System.Random.RandomGen g =>
    (Risk.DieValue, Risk.DieValue) -> g -> [Risk.DieValue]
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ g
                   $dRandomGen :: System.Random.RandomGen g
                   ival :: (Risk.DieValue, Risk.DieValue)
                   g1 :: g ->
                 GHC.Base.build
                   @ Risk.DieValue
                   (\ @ b1
                      cons :: Risk.DieValue -> b1 -> b1[OneShot]
                      _nil :: b1[OneShot] ->
                    let {
                      rand :: g -> (Risk.DieValue, g)
                      = Risk.$fRandomDieValue_$crandomR @ g $dRandomGen ival
                    } in
                    letrec {
                      go :: g -> b1 {- Arity: 1 -}
                      = \ g2 :: g ->
                        case rand g2 of wild { (,) x g' ->
                        case x `cast` (Risk.NTCo:DieValue[0]) of nt { GHC.Types.I# ipv ->
                        cons nt `cast` (Sym (Risk.NTCo:DieValue[0])) (go g') } }
                    } in
                    go g1)) -}
5c582f2cb17135387cb0f739243d488a
  $fRandomDieValue_$crandoms ::
    System.Random.RandomGen g => g -> [Risk.DieValue]
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ g $dRandomGen :: System.Random.RandomGen g g1 :: g ->
                 GHC.Base.build
                   @ Risk.DieValue
                   (\ @ b1
                      cons :: Risk.DieValue -> b1 -> b1[OneShot]
                      _nil :: b1[OneShot] ->
                    letrec {
                      go :: g -> b1 {- Arity: 1 -}
                      = \ g2 :: g ->
                        case Risk.$fRandomDieValue_$crandom
                               @ g
                               $dRandomGen
                               g2 of wild { (,) x g' ->
                        case x `cast` (Risk.NTCo:DieValue[0]) of nt { GHC.Types.I# ipv ->
                        cons nt `cast` (Sym (Risk.NTCo:DieValue[0])) (go g') } }
                    } in
                    go g1)) -}
1a454fefdd3384a13e3dea3785d80816
  $fRandomDieValue_a2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 6) -}
41597b518f3cc09c0c144e35a29cc3f9
  $fRandomDieValue_a3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 1) -}
5c582f2cb17135387cb0f739243d488a
  $fShowDieValue :: GHC.Show.Show Risk.DieValue
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Risk.DieValue
                  Risk.$fShowDieValue_$cshowsPrec
                  Risk.$fShowDieValue_$cshow
                  Risk.$fShowDieValue_$cshowList -}
5c582f2cb17135387cb0f739243d488a
  $fShowDieValue1 :: Risk.DieValue -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Risk.DieValue w1 :: GHC.Base.String ->
                 Risk.$w$cshowsPrec 0 w w1) -}
e7aeffcc2aaabd9fbc9a235a89c0930d
  $fShowDieValue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
8956e473030b8de5012279a066374116
  $fShowDieValue3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unDV = "#) -}
71c2183ee1b3d461fff9c1ca90f9dc45
  $fShowDieValue4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DV {"#) -}
5c582f2cb17135387cb0f739243d488a
  $fShowDieValue_$cshow :: Risk.DieValue -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Risk.DieValue ->
                 Risk.$fShowDieValue_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5c582f2cb17135387cb0f739243d488a
  $fShowDieValue_$cshowList :: [Risk.DieValue] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Risk.DieValue
                   Risk.$fShowDieValue1) -}
5c582f2cb17135387cb0f739243d488a
  $fShowDieValue_$cshowsPrec ::
    GHC.Types.Int -> Risk.DieValue -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><L,1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: Risk.DieValue w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Risk.$w$cshowsPrec ww1 w1 w2 }) -}
5c582f2cb17135387cb0f739243d488a
  $w$crandomR ::
    System.Random.RandomGen g =>
    Risk.DieValue -> Risk.DieValue -> g -> (Risk.DieValue, g)
  {- Arity: 3,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U,U)),A)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ @ g
                   w :: System.Random.RandomGen g
                   ww :: Risk.DieValue
                   ww1 :: Risk.DieValue ->
                 let {
                   a13 :: GHC.Integer.Type.Integer
                   = case ww1
                            `cast`
                          (Risk.NTCo:DieValue[0]) of wild1 { GHC.Types.I# y1 ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# 6 y1) of wild2 {
                       GHC.Types.False -> GHC.Integer.Type.smallInteger y1
                       GHC.Types.True -> Risk.$fRandomDieValue_a2 } }
                 } in
                 let {
                   a14 :: GHC.Integer.Type.Integer
                   = case ww
                            `cast`
                          (Risk.NTCo:DieValue[0]) of wild1 { GHC.Types.I# y1 ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# 1 y1) of wild2 {
                       GHC.Types.False -> Risk.$fRandomDieValue_a3
                       GHC.Types.True -> GHC.Integer.Type.smallInteger y1 } }
                 } in
                 \ x :: g ->
                 case System.Random.$wrandomIvalInteger
                        @ g
                        @ GHC.Types.Int
                        w
                        GHC.Num.$fNumInt
                        a14
                        a13
                        x of ww2 { (#,#) ww3 ww4 ->
                 (ww3 `cast` (Sym (Risk.NTCo:DieValue[0])), ww4) }) -}
5c582f2cb17135387cb0f739243d488a
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Risk.DieValue -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   w :: Risk.DieValue
                   w1 :: GHC.Base.String ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Risk.$fShowDieValue4
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Risk.$fShowDieValue3
                          (case w `cast` (Risk.NTCo:DieValue[0]) of ww2 { GHC.Types.I# ww3 ->
                           case GHC.Show.$wshowSignedInt
                                  0
                                  ww3
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     Risk.$fShowDieValue2
                                     x) of ww4 { (#,#) ww5 ww6 ->
                           GHC.Types.: @ GHC.Types.Char ww5 ww6 } }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p w1
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1)) }) -}
cb71da6005d01c2f398c6984a84db801
  type Army = GHC.Types.Int
2a4382d6d96091d02a166b79f29af52e
  data Battlefield
    = Battlefield {attackers :: Risk.Army, defenders :: Risk.Army}
5c582f2cb17135387cb0f739243d488a
  newtype DieValue = DV {unDV :: GHC.Types.Int}
27fb5ab886cdf34c0e2847668eab3ed2
  attackers :: Risk.Battlefield -> Risk.Army
  RecSel Risk.Battlefield
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Risk.Battlefield ->
                 case ds of wild { Risk.Battlefield ds1 ds2 -> ds1 }) -}
d906238769d9f79c7bf6288916cf33c1
  defenders :: Risk.Battlefield -> Risk.Army
  RecSel Risk.Battlefield
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Risk.Battlefield ->
                 case ds of wild { Risk.Battlefield ds1 ds2 -> ds2 }) -}
ecf99a9aef8e86c98742a9e4341aa70a
  die :: Control.Monad.Random.Rand System.Random.StdGen Risk.DieValue
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (0, True, True)
                Risk.die1
                  `cast`
                (Trans
                     (Sym (Control.Monad.Trans.State.Lazy.NTCo:StateT[0]
                               <System.Random.StdGen>_N
                               <Data.Functor.Identity.Identity>_R
                               <Risk.DieValue>_N))
                     (Sym (Control.Monad.Random.NTCo:RandT[0]) <System.Random.StdGen>_N <Data.Functor.Identity.Identity>_N <Risk.DieValue>_N)) -}
f370452d2828c181a209e7ffa409b0b2
  die1 ::
    System.Random.StdGen
    -> Data.Functor.Identity.Identity
         (Risk.DieValue, System.Random.StdGen)
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ eta2 :: System.Random.StdGen ->
                 case System.Random.$wrandomIvalInteger
                        @ System.Random.StdGen
                        @ GHC.Types.Int
                        System.Random.$fRandomGenStdGen
                        GHC.Num.$fNumInt
                        Risk.$fRandomDieValue_a3
                        Risk.$fRandomDieValue_a2
                        eta2 of ww2 { (#,#) ww3 ww4 ->
                 (ww3 `cast` (Sym (Risk.NTCo:DieValue[0])), ww4)
                   `cast`
                 (Sym (Data.Functor.Identity.NTCo:Identity[0]
                           <(Risk.DieValue, System.Random.StdGen)>_R)) }) -}
b4078f39203d0eca9509f0f1a5883a1d
  first :: (a -> b) -> (a, c) -> (b, c)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a13 @ b @ c f :: a13 -> b ds :: (a13, c) ->
                 case ds of wild { (,) a14 c1 -> (f a14, c1) }) -}
469840b0515a7ca7c7c1f4aad12edd43
  unDV :: Risk.DieValue -> GHC.Types.Int
  RecSel Risk.DieValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Risk.unDV1 `cast` (<Risk.DieValue>_R ->_R Risk.NTCo:DieValue[0]) -}
10550626ba5a23f8e93126cc24603c0a
  unDV1 :: Risk.DieValue -> Risk.DieValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Risk.DieValue -> ds) -}
instance GHC.Classes.Eq [Risk.DieValue] = Risk.$fEqDieValue
instance GHC.Num.Num [Risk.DieValue] = Risk.$fNumDieValue
instance GHC.Classes.Ord [Risk.DieValue] = Risk.$fOrdDieValue
instance System.Random.Random [Risk.DieValue]
  = Risk.$fRandomDieValue
instance GHC.Show.Show [Risk.DieValue] = Risk.$fShowDieValue
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

